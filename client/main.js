const electron = require('electron');
const AutoLaunch = require('auto-launch');
const app = electron.app;
const dialog = electron.dialog;
const globalShortcut = electron.globalShortcut;
const BrowserWindow = electron.BrowserWindow;
const Menu = electron.Menu;

let mainWindow;

function manageStartup(enable) {
    let appLauncher = new AutoLaunch({
        name: 'BB'
    });
    if (enable) {
        appLauncher.isEnabled().then(function(enabled){
            if(enabled) return;
            return appLauncher.enable();
        }).then(function(err){
            if (err !== undefined) console.error(err);
        });
    } else {
        appLauncher.isEnabled().then(function(enabled){
            if(!enabled) return;
            return appLauncher.disable();
        }).then(function(err){
            if (err !== undefined) console.error(err);
        }); 
    }
}

function createWindow() {
    globalShortcut.register('CommandOrControl+Alt+\\', function () {
        let result = dialog.showMessageBox({
            type: 'info',
            title: 'Shortcut pressed',
            message: 'You pressed the keyboard shortcut. \nIf you do not know what you are doing press cancel.',
            buttons: ['Quit Application', 'Enable Startup', 'Disable Startup', 'Cancel']
        });
        
        if (result === 0) {
            mainWindow = null;
            app.exit(0);
        } else if (result === 1) {
            manageStartup(true);
        } else if (result === 2) {
            manageStartup(false);
        }
    });
    
    mainWindow = new BrowserWindow({
        width: 1,
        height: 1,
        show: false,
        closable: false,
        transparent: true,
        resizable: false,
        skipTaskbar: true
    });

    mainWindow.loadURL(`file://${__dirname}/index.html`);

    // Hide application menu.
    Menu.setApplicationMenu(null);

    mainWindow.on('closed', function() {
        mainWindow = null;
    });
}

/*
Uncomment the below code to allow certificate errors.
WARNING! This should only be used if you have a self signed certificate as
this will allow the client to MiTM'd. Use with caution!
*/
//app.commandLine.appendSwitch('ignore-certificate-errors');

// Only allow one instance of the application at a time.
const shouldQuit = app.makeSingleInstance((commandLine, workingDirectory) => {
    if (mainWindow === null) {
        createWindow();
    }
});

if (shouldQuit) {
    mainWindow = null;
    app.exit(0);
}

// Hide application from tray if on OS X.
if (process.platform === 'darwin') {
    app.dock.hide();
}

// Catch uncaughtExceptions so no popups appear on errors.
process.on('uncaughtException', function (err) {
    console.error(err);
});

// Accept --startup as command line argument to enable on startup.
process.argv.forEach(function (val, index, array) {
  if (val === "--startup") {
    manageStartup(true);
  }
});

app.on('before-quit', function() {
    mainWindow = null;
});

app.on('will-quit', function() {
    globalShortcut.unregisterAll();
});

// Re-open if all windows are closed.
app.on('window-all-closed', function() {
    createWindow();
});

app.on('activate', function() {
    // Create window if activated and it doesn't already exist.
    if (mainWindow === null) {
        createWindow();
    }
});

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
app.on('ready', createWindow);